AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an Transit Gateway with a Security VPC and two spoke VPCs VPC0
  and VPC1
Parameters:
  VpcSummaryRoute:
    Type: String
    Description: Summary route for spoke vpcs for example 10.0.0.0/8
    Default: 10.0.0.0/12
  KeyName:
    Description: AWS EC2 Intance ssh key
    Type: AWS::EC2::KeyPair::KeyName
  apikey:
    Description: Api key for firewall management
    Type: String
    Default: LUFRPT1Bd202aGplUGU5UzdJQUxqc2lJZkxnL3JnNU09cmgyaE93L3VoZ2U3WUgxeFpGVE1weFVraUNUQ0JvemN3bnU2aWM5SzZyMWJhamU3Z3RnM01HRkJBMXEwc3hBVw==
  VpcAzs:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Select 2 AZs
  NatInstanceType:
    Description: Instance type to use for NAT
    Type: String
    Default: t2.micro
  SSHLocation:
    Description: Restrict SSH & HTTPS access to the Web Servers (by default can be
      accessed from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  FWInstanceType:
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - m3.xlarge
      - m3.2xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.xlarge
    Description: Enter the instance type and size for the VM-Series firewall

  PanFwAmiId:
    Type: AWS::EC2::Image::Id
    Description: 'AMI List: https://www.paloaltonetworks.com/documentation/global/compatibility-matrix/vm-series-firewalls/aws-cft-amazon-machine-images-ami-list'

  BootstrapBucket:
    Type: String
    Description: Enter the name S3 Bucket Name containing the Bootstrap files
    Default: ''
  LambdaFunctionsBucketName:
    Description: Existing S3 bucket name which contains the Lambda funtions zip file
    Type: String
    Default: ''
  ASNNumber:
    Type: String
    Default: 65003
    Description: BGP ASN Number for firewalls
Mappings:
  CidrBlockMap:
    VpcCidrBlock:
      CidrBlock: 10.253.0.0/16
    MgmtCidrBlock:
      CidrBlockAz1: 10.253.110.0/24
      CidrBlockAz2: 10.253.120.0/24
    UntrustCidrBlock:
      CidrBlockAz1: 10.253.100.0/24
      CidrBlockAz2: 10.253.200.0/24
    TrustCidrBlock:
      CidrBlockAz1: 10.253.130.0/24
      CidrBlockAz2: 10.253.140.0/24
    DMZCidrBlock:
      CidrBlockAz1: 10.253.201.0/24
      CidrBlockAz2: 10.253.202.0/24
    LambdaCidrBlock:
      CidrBlockAz1: 10.253.250.0/28
      CidrBlockAz2: 10.253.250.32/28
    TGWattachCidrBlock:
      CidrBlockAz1: 10.253.1.0/24
      CidrBlockAz2: 10.253.2.0/24
  AWSNATAMI:
    us-east-1:
      AMI: ami-b419e7ce
    us-west-2:
      AMI: ami-0b707a72
    us-east-2:
      AMI: ami-021e3167
    us-west-1:
      AMI: ami-004b0f60
    ca-central-1:
      AMI: ami-12d36a76
    eu-west-1:
      AMI: ami-076d5d61
    eu-west-2:
      AMI: ami-0a4c5a6e
    eu-central-1:
      AMI: ami-0469bb6b
    ap-southeast-1:
      AMI: ami-047a3667
    ap-southeast-2:
      AMI: ami-17809174
    ap-northeast-1:
      AMI: ami-10dfc877
    ap-northeast-2:
      AMI: ami-1a1bc474
    ap-south-1:
      AMI: ami-6dc38202
    sa-east-1:
      AMI: ami-54e59738
  UbuntuRegionMap:
    us-west-2:
      AMI: ami-efd0428f
    ap-northeast-1:
      AMI: ami-afb09dc8
    us-west-1:
      AMI: ami-2afbde4a
    ap-northeast-2:
      AMI: ami-66e33108
    ap-southeast-1:
      AMI: ami-8fcc75ec
    ap-southeast-2:
      AMI: ami-96666ff5
    eu-central-1:
      AMI: ami-060cde69
    eu-west-1:
      AMI: ami-bbc542c8
    eu-west-2:
      AMI: ami-f1d7c395
    sa-east-1:
      AMI: ami-4090f22c
    us-east-1:
      AMI: ami-80861296
    us-east-2:
      AMI: ami-618fab04
    ca-central-1:
      AMI: ami-b3d965d7
    ap-south-1:
      AMI: ami-c2ee9dad
  AWSRegionArch2AMI:
    us-east-1:
      Bundle1: ami-ce01c0b3
      Bundle2: ami-bffd3cc2
      BYOL: ami-a2fa3bdf
    us-east-2:
      Bundle1: ami-10f3c575
      Bundle2: ami-9ef3c5fb
      BYOL: ami-11e1d774
    us-west-1:
      Bundle1: ami-235b4f43
      Bundle2: ami-854551e5
      BYOL: ami-a95b4fc9
    us-west-2:
      Bundle1: ami-8a22b3f2
      Bundle2: ami-9a29b8e2
      BYOL: ami-d424b5ac
    ca-central-1:
      Bundle1: ami-dd0582b9
      Bundle2: ami-57048333
      BYOL: ami-64038400
    eu-central-1:
      Bundle1: ami-1bbdd574
      Bundle2: ami-1ebdd571
      BYOL: ami-55bfd73a
    eu-west-1:
      Bundle1: ami-edb0fe94
      Bundle2: ami-1fb1ff66
      BYOL: ami-62b5fb1b
    eu-west-2:
      Bundle1: ami-f46a8d93
      Bundle2: ami-c4688fa3
      BYOL: ami-876a8de0
    ap-southeast-1:
      Bundle1: ami-55bced29
      Bundle2: ami-36bdec4a
      BYOL: ami-27baeb5b
    ap-southeast-2:
      Bundle1: ami-aed112cc
      Bundle2: ami-add013cf
      BYOL: ami-00d61562
    ap-northeast-2:
      Bundle1: ami-4eb81420
      Bundle2: ami-a8bf13c6
      BYOL: ami-49bd1127
    ap-northeast-1:
      Bundle1: ami-39662d5f
      Bundle2: ami-75652e13
      BYOL: ami-57662d31
    ap-south-1:
      Bundle1: ami-d385dcbc
      Bundle2: ami-ee80d981
      BYOL: ami-e780d988
    sa-east-1:
      Bundle1: ami-9e0154f2
      Bundle2: ami-d80653b4
      BYOL: ami-9c0154f0
  Constants:
    S3URL:
      URL1: https://s3.amazonaws.com
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Route Monitor Configuration
        Parameters:
          - preempt
          - VpcCidrBlock
      - Label:
          default: Security VPC Subnet Configuration
        Parameters:
          - VpcAzs
          - SecurityVPCCIDR
          - SecurityVPCName
          - MgmtSubnetIpBlocks
          - LambdaSubnetIpBlocks
          - TrustSubnetIpBlocks
          - UntrustSubnetIpBlocks
          - DMZSubnetIpBlocks
          - TGWattachIPBlocks
      - Label:
          default: Lambda Configuration
        Parameters:
          - LambdaFunctionsBucketName
      - Label:
          default: Direct Attach Bootstrap Configuration
        Parameters:
          - PanFwAmiId
          - BootstrapBucket
          - apikey
      - Label:
          default: Firewall Configuration
        Parameters:
          - LaunchAutoscaleVpc
          - AutoscaleBootstrapBucket
    ParameterLabels:
      BootstrapBucket:
        default: S3 bucket containing the bootstrap folders and files
      VpcCidrBlock:
        default: Sumamry Route for spoke VPCs the template assumes a 10.0.0.0/8 block
Resources:
  BgpTunnelIpPool:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: IpSegment
          AttributeType: S
      KeySchema:
        - AttributeName: IpSegment
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Join
        - '-'
        - - BgpTunnelIpPool
          - !Ref 'AWS::StackName'
  TGWAutoscaleInitialiseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates the BGP Tunnel IP Pool Table
      Handler: createDbTable.createDbtable_lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Environment:
        Variables:
          table_name: !Join
            - '-'
            - - BgpTunnelIpPool
              - !Ref 'AWS::StackName'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: east-west-lambda-combined.zip
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - BgpTunnelIpPool
  InitialiseAutoscaleTables:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - BgpTunnelIpPool
    Properties:
      ServiceToken: !GetAtt 'TGWAutoscaleInitialiseLambda.Arn'
  LambdaENIPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - LambdaENIPolicy
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref 'LambdaENIRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:DeleteSubnet
              - ec2:DeleteVpnConnectionRoute
              - ec2:DeleteCustomerGateway
              - ec2:DeleteVpnConnection
              - ec2:DeleteTransitGatewayVpcAttachment
              - ec2:DeleteNetworkInterface
              - ec2:DescribeAddresses
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeTransitGateways
              - ec2:SearchTransitGatewayRoutes
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeTransitGatewayRouteTables
              - ec2:DescribeNetworkInterfaceAttribute
              - ec2:DescribeNetworkInterfacePermissions
              - ec2:DescribeNetworkAcls
              - ec2:DescribeRouteTables
              - ec2:GetTransitGatewayRouteTableAssociations
              - ec2:DescribeInstanceStatus
              - ec2:DetachNetworkInterface
              - ec2:DescribeInstanceCreditSpecifications
              - ec2:DescribeSecurityGroups
              - ec2:DescribeImages
              - ec2:DescribeTransitGatewayAttachments
              - ec2:DescribeVpcs
              - ec2:GetTransitGatewayRouteTablePropagations
              - ec2:DescribeSubnets
              - ec2:DescribeVpnGateways
            Resource: '*'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - '*'
  LambdaENIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - ENILambdaExecutionRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
    DependsOn: []
  DeleteLambdaENI:
    Type: AWS::Lambda::Function
    Properties:
      Description: Cleans up static routes pointing to tgw-attachment
      Handler: DeleteLambdaEni.handler
      Role: !GetAtt 'LambdaENIRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: east-west-lambda-combined.zip
      Environment:
        Variables:
          fw1MgmtIp: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw2MgmtIp: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw1TrustIp: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2TrustIp: !GetAtt 'FW2TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustIp: !GetAtt 'FW1UntrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2UntrustIp: !GetAtt 'FW2UntrustNetworkInterface.PrimaryPrivateIpAddress'
          trustAZ1Subnet: !Ref 'TRUSTSubnet1'
          trustAZ2Subnet: !Ref 'TRUSTSubnet2'
          apikey: !Ref 'apikey'
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
          VpcCidrBlock: !FindInMap
            - CidrBlockMap
            - VpcCidrBlock
            - CidrBlock
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - LambdaENIRole
      - LambdaENIPolicy
  DeleteLambdaENIResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: []
    Properties:
      VPCID: !Ref 'SecurityVPC'
      region: !Ref 'AWS::Region'
      ServiceToken: !GetAtt 'DeleteLambdaENI.Arn'
  ASLambdalayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: layer.zip
      Description: Autoscale Layer
      LayerName: as-layer
      LicenseInfo: MIT
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      Description: Security TransitGateway
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: disable
      VpnEcmpSupport: enable
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - tgw-security
  sgWideOpen:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wide open security group
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'SecurityVPC'
  VPC0sgWideOpen:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wide open security group
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC0'
  VPC1sgWideOpen:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wide open security group
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC1'
  sgJumpbox:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Jumpbox
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'SecurityVPC'
  sgLambda:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Jumpbox
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'SecurityVPC'
  SecurityVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - CidrBlockMap
        - VpcCidrBlock
        - CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - tgw-security
    DependsOn:
      - TransitGateway
  SecVPCEc2API:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2
      SecurityGroupIds:
        - !Ref 'sgWideOpen'
      VpcId: !Ref 'SecurityVPC'
      SubnetIds:
        - !Ref 'LambdaSubnetAz1'
        - !Ref 'LambdaSubnetAz2'

  VPC0:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - tgw-spoke1
    DependsOn:
      - TransitGateway
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.2.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - tgw-spoke2
    DependsOn:
      - TransitGateway
  VPC0HostSubnetAz0:
    Type: AWS::EC2::Subnet
    DependsOn: VPC0
    Properties:
      VpcId: !Ref 'VPC0'
      CidrBlock: 10.1.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - spoke1-azA
  VPC0HostSubnetAz1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC0
    Properties:
      VpcId: !Ref 'VPC0'
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - spoke1-azB
  VPC1HostSubnetAz0:
    Type: AWS::EC2::Subnet
    DependsOn: VPC1
    Properties:
      VpcId: !Ref 'VPC1'
      CidrBlock: 10.2.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - spoke2-azA
  VPC1HostSubnetAz1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC1
    Properties:
      VpcId: !Ref 'VPC1'
      CidrBlock: 10.2.1.0/24
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - spoke2-azB
  SecurityVPCAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    DependsOn:
      - TGWattach1
      - TGWattach2
      - TransitGateway
    Properties:
      VpcId: !Ref 'SecurityVPC'
      TransitGatewayId: !Ref 'TransitGateway'
      SubnetIds:
        - !Ref 'TGWattach1'
        - !Ref 'TGWattach2'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - attach-sec
  VPC0AttachmentAzA:
    Type: AWS::EC2::TransitGatewayAttachment
    DependsOn:
      - VPC0HostSubnetAz0
      - VPC0HostSubnetAz1
      - VPC0
      - TransitGateway
    Properties:
      VpcId: !Ref 'VPC0'
      TransitGatewayId: !Ref 'TransitGateway'
      SubnetIds:
        - !Ref 'VPC0HostSubnetAz0'
        - !Ref 'VPC0HostSubnetAz1'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - attach-spoke1
  VPC1AttachmentAzA:
    Type: AWS::EC2::TransitGatewayAttachment
    DependsOn:
      - VPC1HostSubnetAz0
      - VPC1HostSubnetAz1
      - VPC1
      - TransitGateway
    Properties:
      VpcId: !Ref 'VPC1'
      TransitGatewayId: !Ref 'TransitGateway'
      SubnetIds:
        - !Ref 'VPC1HostSubnetAz0'
        - !Ref 'VPC1HostSubnetAz1'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - attach-spoke2
  VPC0AttachmentPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref 'VPC0AttachmentAzA'
      TransitGatewayRouteTableId: !Ref 'SecurityVPCRouteTable'
    DependsOn:
      - VPC0AttachmentAzA
      - SecurityVPCRouteTable
  VPC1AttachmentPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref 'VPC1AttachmentAzA'
      TransitGatewayRouteTableId: !Ref 'SecurityVPCRouteTable'
    DependsOn:
      - VPC1AttachmentAzA
      - SecurityVPCRouteTable
  VPC0RouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    DependsOn:
      - TransitGateway
    Properties:
      TransitGatewayId: !Ref 'TransitGateway'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rtb-spoke
        - Key: Propagate
          Value: EW
  SecurityVPCRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    DependsOn:
      - TransitGateway
    Properties:
      TransitGatewayId: !Ref 'TransitGateway'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rtb-security
        - Key: Propagate
          Value: EW
  VPC0TgwRtAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    DependsOn:
      - VPC0RouteTable
      - VPC0AttachmentAzA
    Properties:
      TransitGatewayRouteTableId: !Ref 'VPC0RouteTable'
      TransitGatewayAttachmentId: !Ref 'VPC0AttachmentAzA'
  VPC1TgwRtAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    DependsOn:
      - VPC0RouteTable
      - VPC1AttachmentAzA
    Properties:
      TransitGatewayRouteTableId: !Ref 'VPC0RouteTable'
      TransitGatewayAttachmentId: !Ref 'VPC1AttachmentAzA'
  SecurityVPCAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    DependsOn:
      - SecurityVPCRouteTable
      - SecurityVPCAttachment
    Properties:
      TransitGatewayRouteTableId: !Ref 'SecurityVPCRouteTable'
      TransitGatewayAttachmentId: !Ref 'SecurityVPCAttachment'
  DMZSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - DMZCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - DMZSubnetAzA
    DependsOn:
      - SecurityVPC
  DMZSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - DMZCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - DMZSubnetAzB
    DependsOn:
      - SecurityVPC
  MGMTSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - MgmtCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - security-East-West-Mgmt-a
    DependsOn:
      - SecurityVPC
  MGMTSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - MgmtCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - security-East-West-Mgmt-a
    DependsOn:
      - SecurityVPC
  LambdaSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - LambdaCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-lambdaA
    DependsOn:
      - SecurityVPC
  LambdaSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - LambdaCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-lambdaB
    DependsOn:
      - SecurityVPC
  UNTRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - UntrustCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - security-East-West-Pub-a
    DependsOn:
      - SecurityVPC
  UNTRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - UntrustCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - security-East-West-Pub-b
    DependsOn:
      - SecurityVPC
  TRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TrustCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-trustA
    DependsOn:
      - SecurityVPC
  TRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TrustCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-trustB
    DependsOn:
      - SecurityVPC
  TGWattach1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TGWattachCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - security-East-West-TGW-a
    DependsOn:
      - SecurityVPC
  TGWattach2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TGWattachCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - security-East-West-TGW-b
    DependsOn:
      - SecurityVPC
  fromTGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rt-fromTGW
    DependsOn:
      - SecurityVPC
  DMZRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - DMZRouteTable
    DependsOn:
      - SecurityVPC
  MGMTRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTRouteTable
    DependsOn:
      - SecurityVPC
  LambdaRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - LambdaRouteTable
    DependsOn:
      - SecurityVPC
  UNTRUSTRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rt-outbound
    DependsOn:
      - SecurityVPC
  toTGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rt-ToTGW
    DependsOn:
      - SecurityVPC
  vpc0HostRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC0'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rt-spoke1
        - Key: Propagation
          Value: EW
    DependsOn:
      - VPC0
  vpc1HostRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC1'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rt-spoke2
    DependsOn:
      - VPC1
  VPC0HostRouteAz1TableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC0HostSubnetAz0'
      RouteTableId: !Ref 'vpc0HostRouteTable'
    DependsOn:
      - VPC0HostSubnetAz0
      - vpc0HostRouteTable
  VPC0HostRouteAz2TableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC0HostSubnetAz1'
      RouteTableId: !Ref 'vpc0HostRouteTable'
    DependsOn:
      - VPC0HostSubnetAz1
      - vpc0HostRouteTable
  VPC1HostRouteAz1TableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC1HostSubnetAz0'
      RouteTableId: !Ref 'vpc1HostRouteTable'
    DependsOn:
      - VPC1HostSubnetAz0
      - vpc1HostRouteTable
  VPC1HostRouteAz2TableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC1HostSubnetAz1'
      RouteTableId: !Ref 'vpc1HostRouteTable'
    DependsOn:
      - VPC1HostSubnetAz1
      - vpc1HostRouteTable
  DMZSubnetAz1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'DMZSubnetAz1'
      RouteTableId: !Ref 'DMZRouteTable'
    DependsOn:
      - DMZSubnetAz1
      - DMZRouteTable
  DMZSubnetAz2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'DMZSubnetAz2'
      RouteTableId: !Ref 'DMZRouteTable'
    DependsOn:
      - DMZRouteTable
      - DMZSubnetAz2
  MGMT1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MGMTSubnetAz1'
      RouteTableId: !Ref 'MGMTRouteTable'
    DependsOn:
      - MGMTRouteTable
  MGMT2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MGMTSubnetAz2'
      RouteTableId: !Ref 'MGMTRouteTable'
    DependsOn:
      - MGMTRouteTable
  Lambda1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'LambdaSubnetAz1'
      RouteTableId: !Ref 'LambdaRouteTable'
    DependsOn:
      - LambdaRouteTable
  Lambda2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'LambdaSubnetAz2'
      RouteTableId: !Ref 'LambdaRouteTable'
    DependsOn:
      - LambdaRouteTable
  UNTRUSTSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'UNTRUSTSubnet1'
      RouteTableId: !Ref 'UNTRUSTRouteTable'
    DependsOn:
      - UNTRUSTRouteTable
      - UNTRUSTSubnet1
  UNTRUSTSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'UNTRUSTSubnet2'
      RouteTableId: !Ref 'UNTRUSTRouteTable'
    DependsOn:
      - UNTRUSTRouteTable
      - UNTRUSTSubnet2
  TRUSTSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TRUSTSubnet1'
      RouteTableId: !Ref 'toTGWRouteTable'
    DependsOn:
      - TRUSTSubnet1
      - toTGWRouteTable
  TRUSTSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TRUSTSubnet2'
      RouteTableId: !Ref 'toTGWRouteTable'
    DependsOn:
      - TRUSTSubnet2
      - toTGWRouteTable
  TGWAtachRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TGWattach1'
      RouteTableId: !Ref 'fromTGWRouteTable'
    DependsOn:
      - TGWattach1
  TGWAtachRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TGWattach2'
      RouteTableId: !Ref 'fromTGWRouteTable'
    DependsOn:
      - TGWattach2
  MGMTRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'MGMTRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      InstanceId: !Ref 'natInstance'
    DependsOn:
      - natInstance
      - MGMTRouteTable
  LambdaRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'LambdaRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      InstanceId: !Ref 'natInstance'
    DependsOn:
      - natInstance
      - LambdaRouteTable
  DMZRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'DMZRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
    DependsOn:
      - DMZRouteTable
      - InternetGateway
  UNTRUSTRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'UNTRUSTRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
    DependsOn:
      - InternetGateway
      - UNTRUSTRouteTable
  FromTGWDefRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'fromTGWRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NetworkInterfaceId: !Ref 'FW1TrustNetworkInterface'
    DependsOn:
      - FW1TrustNetworkInterface
      - fromTGWRouteTable
  FromTGW10NetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'fromTGWRouteTable'
      DestinationCidrBlock: 10.0.0.0/8
      NetworkInterfaceId: !Ref 'FW2TrustNetworkInterface'
    DependsOn:
      - FW2TrustNetworkInterface
      - fromTGWRouteTable
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - InternetGateway
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'SecurityVPC'
      InternetGatewayId: !Ref 'InternetGateway'
    DependsOn:
      - InternetGateway
      - SecurityVPC
  FW1UNTRUSTEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - SecurityVPC
      - GatewayToInternet
      - InternetGateway
  FW2UNTRUSTEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - SecurityVPC
      - GatewayToInternet
      - InternetGateway
  associateFW1UNTRUSTEIP1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'FW1UNTRUSTEIP1.AllocationId'
      NetworkInterfaceId: !Ref 'FW1UntrustNetworkInterface'
  associateFW2UNTRUSTEIP2:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'FW2UNTRUSTEIP2.AllocationId'
      NetworkInterfaceId: !Ref 'FW2UntrustNetworkInterface'
  BootstrapRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: BootstrapRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapBucket'
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapBucket'
                    - /*
  BootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'BootstrapRole'
  FW1ManagementNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 MGMT
      SubnetId: !Ref 'MGMTSubnetAz1'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW1Mgt
    DependsOn:
      - sgWideOpen
  FW1UntrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 E1/1
      SubnetId: !Ref 'UNTRUSTSubnet1'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW1Untrust
    DependsOn:
      - sgWideOpen
  FW1UntrustNetworkInterfaceSecEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  FW1UntrustNetworkInterfaceSecAssociation:
    Type: AWS::EC2::EIPAssociation
    DependsOn:
      - FW1UntrustNetworkInterface
      - FW1UntrustNetworkInterfaceSecEIP
    Properties:
      AllocationId: !GetAtt 'FW1UntrustNetworkInterfaceSecEIP.AllocationId'
      NetworkInterfaceId: !Ref 'FW1UntrustNetworkInterface'
      PrivateIpAddress: !Select
        - '0'
        - !GetAtt 'FW1UntrustNetworkInterface.SecondaryPrivateIpAddresses'
  FW1TrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 E1/2
      SubnetId: !Ref 'TRUSTSubnet1'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW1Trust
    DependsOn:
      - sgWideOpen
  FW2ManagementNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW2 MGMT
      SubnetId: !Ref 'MGMTSubnetAz2'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW2Mgt
    DependsOn:
      - sgWideOpen
  FW2UntrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW2 E1/1
      SubnetId: !Ref 'UNTRUSTSubnet2'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW2Untrust
    DependsOn:
      - sgWideOpen
  FW2UntrustNetworkInterfaceSecEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  FW2UntrustNetworkInterfaceSecAssociation:
    Type: AWS::EC2::EIPAssociation
    DependsOn:
      - FW2UntrustNetworkInterface
      - FW2UntrustNetworkInterfaceSecEIP
    Properties:
      AllocationId: !GetAtt 'FW2UntrustNetworkInterfaceSecEIP.AllocationId'
      NetworkInterfaceId: !Ref 'FW2UntrustNetworkInterface'
      PrivateIpAddress: !Select
        - '0'
        - !GetAtt 'FW2UntrustNetworkInterface.SecondaryPrivateIpAddresses'
  FW2TrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW2 E1/2
      SubnetId: !Ref 'TRUSTSubnet2'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW2Trust
    DependsOn:
      - sgWideOpen
  natInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSNATAMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref 'NatInstanceType'
      KeyName: !Ref 'KeyName'
      SourceDestCheck: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref 'DMZSubnetAz1'
          GroupSet:
            - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - TGWNatInstance
  FW1Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref 'BootstrapInstanceProfile'
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: !Ref 'PanFwAmiId'
      InstanceType: !Ref 'FWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 60
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'FW1UntrustNetworkInterface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'FW1ManagementNetworkInterface'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'FW1TrustNetworkInterface'
          DeviceIndex: '2'
      UserData: !Base64
        Fn::Join:
          - ''
          - - vmseries-bootstrap-aws-s3bucket=
            - !Ref 'BootstrapBucket'
    DependsOn:
      - FW1ManagementNetworkInterface
      - FW1UntrustNetworkInterface
      - FW1TrustNetworkInterface
      - associateFW1UNTRUSTEIP1
  FW2Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref 'BootstrapInstanceProfile'
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: !Ref 'PanFwAmiId'
      InstanceType: !Ref 'FWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 60
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'FW2UntrustNetworkInterface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'FW2ManagementNetworkInterface'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'FW2TrustNetworkInterface'
          DeviceIndex: '2'
      UserData: !Base64
        Fn::Join:
          - ''
          - - vmseries-bootstrap-aws-s3bucket=
            - !Ref 'BootstrapBucket'
    DependsOn:
      - FW2ManagementNetworkInterface
      - FW2UntrustNetworkInterface
      - FW2TrustNetworkInterface
      - FW1Instance
      - associateFW2UNTRUSTEIP2
  VPC0TestServer:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - UbuntuRegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - VPC0TestServer
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: Primary network interface
          DeviceIndex: '0'
          SubnetId: !Ref 'VPC0HostSubnetAz0'
          PrivateIpAddresses:
            - PrivateIpAddress: 10.1.0.110
              Primary: true
          GroupSet:
            - !Ref 'VPC0sgWideOpen'
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash -ex\nuntil resp=$(curl -s -S -g --max-time 3 --insecure \"\
            https://${FWTrustIP}/api/?type=op&cmd=<show><chassis-ready></chassis-ready></show>&key=LUFRPT1qS2xCRmZ6WVMrREtrK00yUGt4dVRna2lkY1U9cmgyaE93L3VoZ2U3WUgxeFpGVE1wOUNtdlM2S0Z5Z25ObG8wbmZoNXpuWT0=\"\
            );do\nif [[ $resp == *\"[CDATA[yes\"* ]] ; then\n    break\n  fi\n  sleep\
            \ 10s\ndone  \nsudo apt-get update &&\nsudo apt-get install -y apache2\
            \ php7.0 &&\nsudo apt-get install -y libapache2-mod-php7. &&\nsudo rm\
            \ -f /var/www/html/index.html &&\nsudo wget -O /var/www/html/index.php\
            \ https://raw.githubusercontent.com/jasonmeurer/showheaders/master/showheaders.php\
            \ &&\nsudo service apache2 restart &&\nsudo echo \"done\"\n"
          - FWTrustIP: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
    DependsOn:
      - VPC1HostSubnetAz0
      - sgWideOpen
      - FW2Instance
      - VPC1sgWideOpen
  VPC1TestServer:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - UbuntuRegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - VPC1TestServer
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: Primary network interface
          DeviceIndex: '0'
          SubnetId: !Ref 'VPC1HostSubnetAz0'
          PrivateIpAddresses:
            - PrivateIpAddress: 10.2.0.110
              Primary: true
          GroupSet:
            - !Ref 'VPC1sgWideOpen'
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash -ex\nuntil resp=$(curl -s -S -g --max-time 3 --insecure \"\
            https://${FWTrustIP}/api/?type=op&cmd=<show><chassis-ready></chassis-ready></show>&key=LUFRPT1qS2xCRmZ6WVMrREtrK00yUGt4dVRna2lkY1U9cmgyaE93L3VoZ2U3WUgxeFpGVE1wOUNtdlM2S0Z5Z25ObG8wbmZoNXpuWT0=\"\
            );do\nif [[ $resp == *\"[CDATA[yes\"* ]] ; then\n    break\n  fi\n  sleep\
            \ 10s\ndone  \nsudo apt-get update &&\nsudo apt-get install -y apache2\
            \ php7.0 &&\nsudo apt-get install -y libapache2-mod-php7. &&\nsudo rm\
            \ -f /var/www/html/index.html &&\nsudo wget -O /var/www/html/index.php\
            \ https://raw.githubusercontent.com/jasonmeurer/showheaders/master/showheaders.php\
            \ &&\nsudo service apache2 restart &&\nsudo echo \"done\"\n"
          - FWTrustIP: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
    DependsOn:
      - VPC1HostSubnetAz0
      - sgWideOpen
      - FW2Instance
      - VPC1sgWideOpen
  SetFWStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - "{\n\"Comment\": \"FW-VPN state function.\",\n\"StartAt\": \"create_aws_vpn\"\
          ,\n\"States\": {\n  \"create_aws_vpn\": {\n    \"Type\": \"Task\",\n   \
          \ \"Resource\": \"${ConfigAwsVpnArn}\",\n    \"Next\": \"aws_vpn_configured\"\
          ,\n    \"TimeoutSeconds\": 230,\n        \"Catch\": [ {\n            \"\
          ErrorEquals\": [\"States.Timeout\"],\n            \"Next\": \"FailState\"\
          \n         } ]\n    \n  },\n  \"aws_vpn_configured\": {\n    \"Type\" :\
          \ \"Choice\",\n    \"Choices\": [\n      {\n      \"Variable\": \"$.Action\"\
          ,\n      \"StringEquals\": \"config_aws_success\",\n      \"Next\": \"config_fw\"\
          \n      },\n      {\n        \"Variable\": \"$.Action\",\n        \"StringEquals\"\
          : \"config_aws_failed\",\n        \"Next\": \"delete_aws_vpn\"\n      }\n\
          \    ]\n    },\n    \"config_fw\": {\n      \"Type\" : \"Task\",\n     \
          \ \"Resource\": \"${ConfigFwArn}\",\n      \"Next\": \"fw_configured\",\n\
          \      \"TimeoutSeconds\": 890,\n        \"Catch\": [ {\n            \"\
          ErrorEquals\": [\"States.Timeout\"],\n            \"Next\": \"delete_aws_vpn\"\
          \n         } ]\n      \n    },\n    \"fw_configured\": {\n    \"Type\" :\
          \ \"Choice\",\n    \"Choices\": [\n        {\n        \"Variable\": \"$.Action\"\
          ,\n        \"StringEquals\": \"config_fw_success\",\n        \"Next\": \"\
          create_panw_vpn\"\n        },\n        {\n          \"Variable\": \"$.Action\"\
          ,\n          \"StringEquals\": \"config_fw_failed\",\n          \"Next\"\
          : \"delete_aws_vpn\"\n        }\n        ]\n    },\n    \"create_panw_vpn\"\
          : {\n        \"Type\" : \"Task\",\n        \"Resource\": \"${ConfigPanwVpnArn}\"\
          ,\n        \"Next\": \"panw_vpn_configured\",\n        \"TimeoutSeconds\"\
          : 590,\n        \"Catch\": [ {\n            \"ErrorEquals\": [\"States.Timeout\"\
          ],\n            \"Next\": \"delete_fw_vpn\"\n         } ]\n      \n    \
          \  },\n    \"panw_vpn_configured\": {\n      \"Type\" : \"Choice\",\n  \
          \    \"Choices\": [\n        {\n          \"Variable\": \"$.Action\",\n\
          \          \"StringEquals\": \"config_fw_vpn_success\",\n          \"Next\"\
          : \"modify_bgp\"\n        },\n        {\n          \"Variable\": \"$.Action\"\
          ,\n          \"StringEquals\": \"config_fw_vpn_failed\",\n          \"Next\"\
          : \"delete_fw_vpn\"\n        }\n      ]\n    },\n    \"delete_fw_vpn\":\
          \ {\n      \"Type\" : \"Task\",\n      \"Resource\": \"${DeleteFwVpnArn}\"\
          ,\n      \"Next\": \"delete_aws_vpn\"\n    },\n    \"delete_aws_vpn\": {\n\
          \        \"Type\" : \"Task\",\n        \"Resource\": \"${DeleteAwsVpnArn}\"\
          ,\n        \"Next\": \"FailState\"\n    },\n    \"modify_bgp\": {\n    \
          \  \"Type\": \"Task\",\n      \"Resource\": \"${UpdateRoutesArn}\",\n  \
          \    \"End\": true\n    },\n   \"FailState\": {\n  \"Type\": \"Fail\",\n\
          \  \"Cause\": \"Failed to create VPN\",\n  \"Error\": \"Creation Error\"\
          \n}\n  }\n\n}"
        - UpdateRoutesArn: !GetAtt 'UpdateRoutes.Arn'
          DeleteFwVpnArn: !GetAtt 'DeleteFwVpn.Arn'
          ConfigAwsVpnArn: !GetAtt 'ConfigAwsVpn.Arn'
          ConfigFwArn: !GetAtt 'ConfigFw.Arn'
          ConfigPanwVpnArn: !GetAtt 'ConfigPanwVpn.Arn'
          DeleteAwsVpnArn: !GetAtt 'DeleteAwsVpn.Arn'
      RoleArn: !GetAtt 'StateMachineExecutionRole.Arn'
    DependsOn:
      - FW1Instance
      - FW2Instance
      - UpdateRoutes
      - ConfigAwsVpn
      - ConfigFw
      - ConfigPanwVpn
      - DeleteAwsVpn
  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - StateMachineExecutionRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !Join
                - .
                - - states
                  - !Ref 'AWS::Region'
                  - amazonaws.com
            Action: sts:AssumeRole
      Path: /
  StateMachineExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - StateMachineExecutionPolicy
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref 'StateMachineExecutionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: '*'
  UpdateRoutes:
    Type: AWS::Lambda::Function
    Properties:
      Description: Updates the AS path prepend
      Handler: update_routes.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: step.zip
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          table_name: !Join
            - '-'
            - - BgpTunnelIpPool
              - !Ref 'AWS::StackName'
          tgwAssociationRt: !Ref 'SecurityVPCRouteTable'
          fw1MgmtIp: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw2MgmtIp: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw1TrustIp: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2TrustIp: !GetAtt 'FW2TrustNetworkInterface.PrimaryPrivateIpAddress'
          apikey: !Ref 'apikey'
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'sgLambda'
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'
      Runtime: python3.6
      Timeout: 600
    DependsOn:
      - FW1Instance
      - FW2Instance
      - FW1UNTRUSTEIP1
      - FW2UNTRUSTEIP2
  DeleteFwVpn:
    Type: AWS::Lambda::Function
    Properties:
      Description: Deletes VPN connections on the firewall
      Handler: delete_fw_vpn.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: step.zip
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          table_name: !Join
            - '-'
            - - BgpTunnelIpPool
              - !Ref 'AWS::StackName'
          tgwId: !Ref 'TransitGateway'
          N1Asn: !Ref 'ASNNumber'
          tgwRouteId: !Ref 'SecurityVPCRouteTable'
          fw1MgmtIp: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw2MgmtIp: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw1TrustIp: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2TrustIp: !GetAtt 'FW2TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustIp: !GetAtt 'FW1UntrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2UntrustIp: !GetAtt 'FW2UntrustNetworkInterface.PrimaryPrivateIpAddress'
          trustAZ1Subnet: !Ref 'TRUSTSubnet1'
          trustAZ2Subnet: !Ref 'TRUSTSubnet2'
          untrustAZ1Subnet: !Ref 'UNTRUSTSubnet1'
          untrustAZ2Subnet: !Ref 'UNTRUSTSubnet2'
          VpcCidrBlock: !FindInMap
            - CidrBlockMap
            - VpcCidrBlock
            - CidrBlock
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
          apikey: !Ref 'apikey'
          fw1UntrustPubIp: !Ref 'FW1UNTRUSTEIP1'
          fw1UntrustSecPubIp: !Ref 'FW1UntrustNetworkInterfaceSecEIP'
          fw2UntrustPubIp: !Ref 'FW2UNTRUSTEIP2'
          fw2ntrustSecPubIp: !Ref 'FW2UntrustNetworkInterfaceSecEIP'
          fw1instanceId: !Ref 'FW1Instance'
          fw2instanceId: !Ref 'FW2Instance'
          lambda_bucket_name: !Ref 'LambdaFunctionsBucketName'
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'sgLambda'
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'
      Runtime: python3.6
      Timeout: 600
    DependsOn:
      - FW1Instance
      - FW2Instance
      - FW1UNTRUSTEIP1
      - FW2UNTRUSTEIP2
  DeleteAwsVpn:
    Type: AWS::Lambda::Function
    Properties:
      Description: Deletes AWS vpn and cgw
      Handler: delete_aws_vpn.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: step.zip
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          table_name: !Join
            - '-'
            - - BgpTunnelIpPool
              - !Ref 'AWS::StackName'
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'sgLambda'
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'
      Runtime: python3.6
      Timeout: 600
    DependsOn:
      - FW1Instance
      - FW2Instance
      - FW1UNTRUSTEIP1
      - FW2UNTRUSTEIP2
  ConfigAwsVpn:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates cgw and vpn connection
      Handler: config_aws_vpn.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: step.zip
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          table_name: !Join
            - '-'
            - - BgpTunnelIpPool
              - !Ref 'AWS::StackName'
          tgwId: !Ref 'TransitGateway'
          N1Asn: !Ref 'ASNNumber'
          tgwRouteId: !Ref 'SecurityVPCRouteTable'
          fw1MgmtIp: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw2MgmtIp: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustPubIp: !Ref 'FW1UNTRUSTEIP1'
          fw2UntrustPubIp: !Ref 'FW2UNTRUSTEIP2'
          fw1UntrustSecPubIp: !Ref 'FW1UntrustNetworkInterfaceSecEIP'
          fw2UntrustSecPubIp: !Ref 'FW2UntrustNetworkInterfaceSecEIP'
          fw1instanceId: !Ref 'FW1Instance'
          fw2instanceId: !Ref 'FW2Instance'
          lambda_bucket_name: !Ref 'LambdaFunctionsBucketName'
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'sgLambda'
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'
      Runtime: python3.6
      Timeout: 240
    DependsOn:
      - FW1Instance
      - FW2Instance
      - FW1UNTRUSTEIP1
      - FW2UNTRUSTEIP2
  ConfigFw:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates vpn connections on the firewall
      Handler: config_fw.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: step.zip
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          N1Asn: !Ref 'ASNNumber'
          tgwRouteId: !Ref 'SecurityVPCRouteTable'
          fw1MgmtIp: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw2MgmtIp: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw1TrustIp: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2TrustIp: !GetAtt 'FW2TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustIp: !GetAtt 'FW1UntrustNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustSecIp: !Select
            - '0'
            - !GetAtt 'FW1UntrustNetworkInterface.SecondaryPrivateIpAddresses'
          fw2UntrustIp: !GetAtt 'FW2UntrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2UntrustSecIp: !Select
            - '0'
            - !GetAtt 'FW2UntrustNetworkInterface.SecondaryPrivateIpAddresses'
          trustAZ1Subnet: !Ref 'TRUSTSubnet1'
          trustAZ2Subnet: !Ref 'TRUSTSubnet2'
          untrustAZ1Subnet: !Ref 'UNTRUSTSubnet1'
          untrustAZ2Subnet: !Ref 'UNTRUSTSubnet2'
          apikey: !Ref 'apikey'
          fw1UntrustPubIp: !Ref 'FW1UNTRUSTEIP1'
          fw2UntrustPubIp: !Ref 'FW2UNTRUSTEIP2'
          fw1UntrustSecPubIp: !Ref 'FW1UntrustNetworkInterfaceSecEIP'
          fw2UntrustSecPubIp: !Ref 'FW2UntrustNetworkInterfaceSecEIP'
          fw1instanceId: !Ref 'FW1Instance'
          fw2instanceId: !Ref 'FW2Instance'
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
          VpcCidrBlock: !FindInMap
            - CidrBlockMap
            - VpcCidrBlock
            - CidrBlock
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'sgLambda'
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'
      Runtime: python3.6
      Timeout: 900
    DependsOn:
      - FW1Instance
      - FW2Instance
      - FW1UNTRUSTEIP1
      - FW2UNTRUSTEIP2
  ConfigPanwVpn:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates the vpn connection on the firewall
      Handler: config_panw_vpn.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: step.zip
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          table_name: !Join
            - '-'
            - - BgpTunnelIpPool
              - !Ref 'AWS::StackName'
          tgwId: !Ref 'TransitGateway'
          N1Asn: !Ref 'ASNNumber'
          fw1MgmtIp: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw2MgmtIp: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw1TrustIp: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2TrustIp: !GetAtt 'FW2TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustPubIp: !Ref 'FW1UNTRUSTEIP1'
          fw2UntrustPubIp: !Ref 'FW2UNTRUSTEIP2'
          fw1UntrustIp: !GetAtt 'FW1UntrustNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustSecIp: !Select
            - '0'
            - !GetAtt 'FW1UntrustNetworkInterface.SecondaryPrivateIpAddresses'
          fw2UntrustIp: !GetAtt 'FW2UntrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2UntrustSecIp: !Select
            - '0'
            - !GetAtt 'FW2UntrustNetworkInterface.SecondaryPrivateIpAddresses'
          trustAZ1Subnet: !Ref 'TRUSTSubnet1'
          trustAZ2Subnet: !Ref 'TRUSTSubnet2'
          untrustAZ1Subnet: !Ref 'UNTRUSTSubnet1'
          untrustAZ2Subnet: !Ref 'UNTRUSTSubnet2'
          apikey: !Ref 'apikey'
          lambda_bucket_name: !Ref 'LambdaFunctionsBucketName'
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'sgLambda'
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'
      Runtime: python3.6
      Timeout: 600
    DependsOn:
      - FW1Instance
      - FW2Instance
      - FW1UNTRUSTEIP1
      - FW2UNTRUSTEIP2
  SetTransitGatewayIdRoute:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - toTGWRouteTable
      - vpc0HostRouteTable
      - vpc1HostRouteTable
      - TransitGateway
    Properties:
      ServiceToken: !GetAtt 'TransitGatewayInitialiseLambda.Arn'
  TransitGatewayInitialiseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Sets TransitGatewayId as next hop
      Handler: TransitGatewayInitialiseLambda.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: east-west-lambda-combined.zip
      Environment:
        Variables:
          fw1MgmtIp: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw2MgmtIp: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
          fw1InstanceId: !Ref 'FW1Instance'
          fw2InstanceId: !Ref 'FW2Instance'
          toTGWRouteTableId: !Ref 'toTGWRouteTable'
          fromTGWRouteTableId: !Ref 'fromTGWRouteTable'
          vpc0HostRouteTableid: !Ref 'vpc0HostRouteTable'
          vpc1HostRouteTableid: !Ref 'vpc1HostRouteTable'
          transitGatewayid: !Ref 'TransitGateway'
          Region: !Ref 'AWS::Region'
          InitFWStateMachine: !Ref 'SetFWStateMachine'
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
          VpcCidrBlock: !FindInMap
            - CidrBlockMap
            - VpcCidrBlock
            - CidrBlock
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - fromTGWRouteTable
      - toTGWRouteTable
      - toTGWRouteTable
      - vpc0HostRouteTable
      - vpc1HostRouteTable
      - TransitGateway
      - VPC0AttachmentAzA
      - VPC1AttachmentAzA
      - SetFWStateMachine
      - FW1Instance
      - FW2Instance
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - TransitLambdaExecutionRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - TransitLambdaExecutionPolicy
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref 'LambdaExecutionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: STSAccumRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - '*'
          - Sid: InvokeLambda
            Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:ListLayerVersions
              - lambda:ListLayers
              - lambda:DeleteFunction
              - lambda:CreateFunction
            Resource:
              - '*'
          - Sid: DynamoDbActions
            Effect: Allow
            Action:
              - dynamodb:CreateTable
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:ListTables
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:TagResource
              - dynamodb:UpdateItem
              - dynamodb:UpdateTable
            Resource:
              - '*'
          - Action:
              - iam:UpdateAssumeRolePolicy
              - iam:GetRole
              - iam:PassRole
            Resource:
              - '*'
            Effect: Allow
            Sid: IAMActions
          - Action:
              - cloudformation:*
            Resource:
              - '*'
            Effect: Allow
            Sid: CloudFormationActions
          - Action:
              - ec2:*
            Resource:
              - '*'
            Effect: Allow
            Sid: EC2FullAccess
          - Sid: StateMachineActions
            Effect: Allow
            Action:
              - states:ListExecutions
              - states:StartExecution
            Resource:
              - '*'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - '*'
          - Sid: S3Actions
            Effect: Allow
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectTagging
              - s3:DeleteBucket
              - s3:DeleteBucketPolicy
              - s3:DeleteObject
            Resource:
              - '*'
Outputs:
  KeyName:
    Value: !Ref 'KeyName'
    Description: Key Pair you have selected for SSH
  VPCID:
    Value: !Ref 'SecurityVPC'
    Description: VPC ID
  TGWID:
    Value: !Ref 'TransitGateway'
    Description: TGW ID
  Fw1PublicIP:
    Value: !Ref 'FW1UNTRUSTEIP1'
    Description: Firewall 1 Untrust Interface Public IP
  Fw2PublicIP:
    Value: !Ref 'FW2UNTRUSTEIP2'
    Description: Firewall 1 Untrust Interface Public IP
  NATInstancePublicIp:
    Value: !GetAtt 'natInstance.PublicIp'
    Description: NAT Instance Public IP
  Fw1InstanceId:
    Value: !Ref 'FW1Instance'
    Description: Firewall1 Instance id
  FW1TrustNetworkInterface:
    Value: !Ref 'FW1TrustNetworkInterface'
    Description: Firewall 1 Trust Interface
  Fw2InstanceId:
    Value: !Ref 'FW2Instance'
    Description: Firewall2 Instance id
  FW2TrustNetworkInterface:
    Value: !Ref 'FW2TrustNetworkInterface'
    Description: Firewall 2 Trust Interface
  fromTGWRouteTableId:
    Value: !Ref 'fromTGWRouteTable'
    Description: fromTGWRouteTable id
  Fw1MgmtIP:
    Value: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
    Description: Firewall 1 Untrust Interface Public IP
  Fw2MgmtIP:
    Value: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
    Description: Firewall 2 Untrust Interface Public IP